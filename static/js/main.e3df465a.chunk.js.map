{"version":3,"sources":["store/constants.js","store/reducer.js","store/store.js","serviceWorker.js","store/actions.js","components/Modal.js","components/UserSearch.js","components/Bio.js","components/Repo.js","App.js","index.js"],"names":["UPDATE_USERNAME","USERNAME_STATUS","UPDATE_USERDETAILS","UPDATE_PUBLICREPOS","UPDATE_CHARTDATA","MODAL_STATUS","initialState","username","isValidUser","userDetails","publicRepos","chartData","isModalOpen","reducer","state","arguments","length","undefined","action","type","Object","assign","payload","store","createStore","Boolean","window","location","hostname","match","modalStatus","Modal","connect","dispatch","_ref","_useState","useState","_useState2","slicedToArray","currentPage","setCurrentPage","react_default","a","createElement","Fragment","className","index_esm","width","height","chartType","loader","data","options","chart","title","subtitle","colors","legend","position","onClick","disabled","UserSearch","updateUsername","usernameStatus","updateUserDetails","updatePublicRepos","searchName","setSearchName","handleSubmit","_ref2","asyncToGenerator","regenerator_default","mark","_callee","event","searchNameRes","publicRepoRes","wrap","_context","prev","next","preventDefault","axios","get","concat","sent","login","t0","stop","_x","apply","this","onSubmit","name","value","onChange","target","placeholder","Bio","avatar_url","public_repos","blog","html_url","src","alt","href","rel","Repo","updateChartData","handleRepoClick","commitStatRes","weeklyCommits","weekCount","_loop","textContent","all","reverse","splitCommits","toConsumableArray","splice","splitChartData","forEach","push","unshift","map","publicRepo","key","id","App","components_UserSearch","components_Bio","components_Repo","components_Modal","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3df465a.chunk.js","sourcesContent":["export const UPDATE_USERNAME = \"UPDATE_USERNAME\";\nexport const USERNAME_STATUS = \"USERNAME_STATUS\";\nexport const UPDATE_USERDETAILS = \"UPDATE_USERDETAILS\";\nexport const UPDATE_PUBLICREPOS = \"UPDATE_PUBLICREPOS\";\nexport const UPDATE_CHARTDATA = \"UPDATE_CHARTDATA\";\nexport const MODAL_STATUS = \"MODAL_STATUS\";\n","import {\n  UPDATE_USERNAME,\n  USERNAME_STATUS,\n  UPDATE_USERDETAILS,\n  UPDATE_PUBLICREPOS,\n  UPDATE_CHARTDATA,\n  MODAL_STATUS\n} from \"./constants\";\n\nconst initialState = {\n  username: \"\",\n  isValidUser: false,\n  userDetails: [],\n  publicRepos: [],\n  chartData: [],\n  isModalOpen: false\n};\n\nfunction reducer(state = initialState, action) {\n  if (action.type === UPDATE_USERNAME) {\n    return Object.assign({}, state, {\n      username: action.payload\n    });\n  }\n  if (action.type === USERNAME_STATUS) {\n    return Object.assign({}, state, {\n      isValidUser: action.payload\n    });\n  }\n  if (action.type === UPDATE_USERDETAILS) {\n    return Object.assign({}, state, {\n      userDetails: action.payload\n    });\n  }\n  if (action.type === UPDATE_PUBLICREPOS) {\n    return Object.assign({}, state, {\n      publicRepos: action.payload\n    });\n  }\n  if (action.type === UPDATE_CHARTDATA) {\n    return Object.assign({}, state, {\n      chartData: action.payload\n    });\n  }\n  if (action.type === MODAL_STATUS) {\n    return Object.assign({}, state, {\n      isModalOpen: action.payload\n    });\n  }\n  return state;\n}\n\nexport default reducer;\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  UPDATE_USERNAME,\n  USERNAME_STATUS,\n  UPDATE_USERDETAILS,\n  UPDATE_PUBLICREPOS,\n  UPDATE_CHARTDATA,\n  MODAL_STATUS\n} from \"./constants\";\n\nexport function updateUsername(payload) {\n  return { type: UPDATE_USERNAME, payload };\n}\n\nexport function usernameStatus(payload) {\n  return { type: USERNAME_STATUS, payload };\n}\n\nexport function updateUserDetails(payload) {\n  return { type: UPDATE_USERDETAILS, payload };\n}\n\nexport function updatePublicRepos(payload) {\n  return { type: UPDATE_PUBLICREPOS, payload };\n}\n\nexport function updateChartData(payload) {\n  return { type: UPDATE_CHARTDATA, payload };\n}\n\nexport function modalStatus(payload) {\n  return { type: MODAL_STATUS, payload };\n}\n","import React, { useState } from \"react\";\nimport Chart from \"react-google-charts\";\n\nimport { connect } from \"react-redux\";\nimport { modalStatus } from \"../store/actions\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    modalStatus: isModalOpen => dispatch(modalStatus(isModalOpen))\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    chartData: state.chartData\n  };\n};\n\nconst ConnectedModal = ({ chartData, modalStatus }) => {\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const handleClose = () => {\n    setCurrentPage(0);\n    modalStatus(false);\n  };\n\n  return (\n    <>\n      <div className=\"modal\">\n        <div className=\"modal-body\">\n          <Chart\n            width={\"350px\"}\n            height={\"300px\"}\n            chartType=\"Bar\"\n            loader={<div>Loading Chart</div>}\n            data={chartData[currentPage]}\n            options={{\n              chart: {\n                title: \"Commit Frequency\",\n                subtitle: \"Commits trend for last 52 weeks\"\n              },\n              colors: [\"#7d058d\"],\n              legend: { position: \"none\" }\n            }}\n          />\n          <div className=\"modal-actions\">\n            <div>\n              <button\n                onClick={() => setCurrentPage(currentPage - 1)}\n                disabled={currentPage === 0}\n                className=\"app-buttons modal-buttons__green\"\n              >\n                Prev\n              </button>\n              <button\n                onClick={() => setCurrentPage(currentPage + 1)}\n                disabled={currentPage === 5}\n                className=\"app-buttons modal-buttons__blue\"\n              >\n                Next\n              </button>\n            </div>\n            <button\n              onClick={handleClose}\n              className=\"app-buttons modal-buttons__red\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Modal = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedModal);\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport {\n  updateUsername,\n  usernameStatus,\n  updateUserDetails,\n  updatePublicRepos\n} from \"../store/actions\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateUsername: username => dispatch(updateUsername(username)),\n    usernameStatus: isValidUser => dispatch(usernameStatus(isValidUser)),\n    updateUserDetails: userDetails => dispatch(updateUserDetails(userDetails)),\n    updatePublicRepos: publicRepos => dispatch(updatePublicRepos(publicRepos))\n  };\n}\n\nconst ConnectedUserSearch = ({\n  updateUsername,\n  usernameStatus,\n  updateUserDetails,\n  updatePublicRepos\n}) => {\n  const [searchName, setSearchName] = useState(\"\");\n\n  // Handle Username Input Change\n  const handleChange = event => {\n    setSearchName(event.target.value);\n  };\n\n  // Handle Form Submit\n  const handleSubmit = async event => {\n    try {\n      event.preventDefault();\n      const searchNameRes = await axios.get(\n        `https://api.github.com/users/${searchName}`\n      );\n      usernameStatus(false);\n      updateUsername(searchNameRes.data.login);\n      updateUserDetails(searchNameRes.data);\n      const publicRepoRes = await axios.get(\n        `https://api.github.com/users/${searchName}/repos`\n      );\n      updatePublicRepos(publicRepoRes.data);\n      setSearchName(\"\");\n    } catch (err) {\n      usernameStatus(true);\n      setSearchName(\"\");\n    }\n  };\n\n  return (\n    <form className=\"app-formGroup\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"username\"\n        value={searchName}\n        onChange={handleChange}\n        placeholder=\"Search for the Username\"\n      />\n      <button\n        disabled={searchName === \"\"}\n        className=\"app-buttons formGroup__white\"\n      >\n        Submit{\" \"}\n      </button>\n    </form>\n  );\n};\n\nconst UserSearch = connect(\n  null,\n  mapDispatchToProps\n)(ConnectedUserSearch);\n\nexport default UserSearch;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    username: state.username,\n    userDetails: state.userDetails\n  };\n};\n\nconst ConnectedBio = ({ username, userDetails }) => {\n  const { avatar_url, name, public_repos, blog, html_url } = userDetails;\n\n  return (\n    <>\n      {username && (\n        <div className=\"app-bioContainer\">\n          <img src={avatar_url} alt=\"avatar\" className=\"bio-avatar\" />\n          <div className=\"bio-body\">\n            <div className=\"bio-body__name\">{name}</div>\n            <div className={!name ? \"bio-body__name\" : \"bio-body__username\"}>\n              {username} : {public_repos} Public Repositories\n            </div>\n            <div>\n              <a\n                href={blog}\n                className=\"bio-body__link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Website\n              </a>\n              <a\n                href={html_url}\n                className=\"bio-body__link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                See in GitHub\n              </a>\n            </div>\n          </div>\n        </div>\n      )}\n      {username && public_repos === 0 && (\n        <div className=\"bio-warning text-center\">\n          No public repo found for this user !!\n        </div>\n      )}\n    </>\n  );\n};\n\nconst Bio = connect(mapStateToProps)(ConnectedBio);\n\nexport default Bio;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { updateChartData, modalStatus } from \"../store/actions\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateChartData: chartData => dispatch(updateChartData(chartData)),\n    modalStatus: isModalOpen => dispatch(modalStatus(isModalOpen))\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.username,\n    publicRepos: state.publicRepos\n  };\n};\n\nconst ConnectedRepo = ({\n  publicRepos,\n  username,\n  updateChartData,\n  modalStatus\n}) => {\n  // Handle each repository click\n  const handleRepoClick = async event => {\n    const commitStatRes = await axios.get(\n      `https://api.github.com/repos/${username}/${\n        event.target.textContent\n      }/stats/participation`\n    );\n    const weeklyCommits = commitStatRes.data.all.reverse();\n    // Pagination Calculation\n    let weekCount = 1;\n    let chartData = [];\n    while (weeklyCommits.length > 0) {\n      const splitCommits = [...weeklyCommits.splice(0, 10)];\n      let splitChartData = [];\n      // eslint-disable-next-line\n      splitCommits.forEach(data => {\n        splitChartData.push([`Week ${weekCount}`, data]);\n        weekCount += 1;\n      });\n      splitChartData.unshift([\"Weeks\", \"Total Commits\"]);\n      chartData.push(splitChartData);\n    }\n    updateChartData(chartData);\n    modalStatus(true);\n  };\n\n  return (\n    <>\n      {username && publicRepos.length !== 0 && (\n        <div>\n          <h2 className=\"text-center\">Public Repositories</h2>\n          <ul className=\"app-repoContainer\">\n            {publicRepos.map(publicRepo => (\n              <li\n                key={publicRepo.id}\n                className=\"repo-list text-center\"\n                onClick={handleRepoClick}\n              >\n                {publicRepo.name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst Repo = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedRepo);\n\nexport default Repo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\n// Components\nimport Modal from \"./components/Modal\";\nimport UserSearch from \"./components/UserSearch\";\nimport Bio from \"./components/Bio\";\nimport Repo from \"./components/Repo\";\n\nconst mapStateToProps = state => {\n  return {\n    isValidUser: state.isValidUser,\n    isModalOpen: state.isModalOpen\n  };\n};\n\nconst ConnectedApp = ({ isValidUser, isModalOpen }) => {\n  return (\n    <div className=\"app\">\n      <h2 className=\"app-title text-center\">GitHub Commits History Chart</h2>\n      <h5 className=\"app-subTitle text-center\">\n        Get weekly commit count on all public repos\n      </h5>\n      <UserSearch />\n      {isValidUser && (\n        <div className=\"bio-warning text-center\">\n          Please enter a valid username!!\n        </div>\n      )}\n      {!isValidUser && <Bio />}\n      {!isValidUser && <Repo />}\n      {isModalOpen && <Modal />}\n    </div>\n  );\n};\n\nconst App = connect(mapStateToProps)(ConnectedApp);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Component\nimport App from \"./App\";\n\n// Styles\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}